version: '3.9'

networks:
  HammerHouseNetwork:

services:
  api-gateway-server:
    image: jorra04/apigatewayserver:latest
    ports:
      - "8080:8080"
    environment:
      - CATALOGUE_SERVER=catalogueserver
      - AUTH_SERVER=authserver
      - GRPC_SERVER=grpcServer
      - PAYMENT_SERVER=paymentserver
      - SHIPPING_SERVER=shippingserver
    networks:
      - HammerHouseNetwork
    depends_on:
      - CatalogueServer
      - AuthServer
      - AuctionServer
    volumes:
      - ./APIGatewayHealthScript.sh:/wait-for-services.sh
    entrypoint: /wait-for-services.sh

  AuthServer:
    image: jorra04/authserver:latest
    container_name: authserver
    ports:
      - "5001:5001"
    networks:
      - HammerHouseNetwork
    restart:
      on-failure
    environment:
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/authdb?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
    depends_on:
      mysqldb:
        condition: service_healthy
        
  mysqldb:
    image: mysql
    container_name: mysqldb
    expose:
      - '3306'
    networks:
      - HammerHouseNetwork
    volumes:
      - ./authDBInit.sql:/docker-entrypoint-initdb.d/initDB.sql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=authdb
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 30s
      retries: 10

  CatalogueServer:
    image: jorra04/catalogueserver:latest
    container_name: catalogueserver
    ports:
      - "5002:5002"
    networks:
      - HammerHouseNetwork
    environment:
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - HammerHouseNetwork
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  AuctionServer:
    container_name: grpcServer # set the name of the container
    image: jorra04/auctionserver:latest
    ports:
      - "5003:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - HammerHouseNetwork
  db:
    image: mysql
    container_name: my_mysql_container # set the name of the container
    expose:
      - '3306'
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      retries: 3
      timeout: 5s
    environment:
      MYSQL_DATABASE: BidDB
      MYSQL_ROOT_PASSWORD: password
    networks:
      - HammerHouseNetwork

  PaymentServer:
    image: jorra04/paymentserver:latest
    container_name: paymentserver
    ports:
      - "5004:5004"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payment_server
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=testpw
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - HammerHouseNetwork

  postgres:
    build:
      context: .
      dockerfile: Dockerfile.payment_pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpw
      POSTGRES_DB: payment_server
    ports:
      - "5432:5432"
    networks:
      - HammerHouseNetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 50
    volumes:
      - pgdata_payment:/var/lib/postgresql/data

  ShippingServer:
    image: jorra04/shippingserver:latest
    container_name: shippingserver
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_ship:5433/shipping_server
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=testpw
    ports:
      - "5005:5005"
    depends_on:
      postgres_ship:
        condition: service_healthy
    networks:
      - HammerHouseNetwork
  postgres_ship:
    build:
      context: .
      dockerfile: Dockerfile.shipping_pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpw
      POSTGRES_DB: shipping_server
    ports:
      - "5433:5433"
    networks:
      - HammerHouseNetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5433 -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 50
    volumes:
      - pgdata_ship:/var/lib/postgresql/data

networks:
  HammerHouseNetwork:
    driver: bridge
volumes:
  pgdata_ship:
  pgdata_payment:
